0 * * * start
start * * l add-first-b
add-first-b * b r compare-cycle
left-to-compare-cycle _ * r right-then-compare-cycle
left-to-compare-cycle * * l left-to-compare-cycle
right-then-compare-cycle * * r compare-cycle
compare-cycle a A r match-next-a-after-b
compare-cycle A * r compare-cycle
compare-cycle b * * in-order
compare-cycle _ * l start-eliminating
compare-cycle * * * ERROR-compare-cycle
match-next-a-after-b a * r match-next-a-after-b
match-next-a-after-b A * r match-next-a-after-b
match-next-a-after-b b * r match-next-a-have-seen-b
match-next-a-after-b _ * l start-eliminating
match-next-a-after-b * * * ERROR-match-next-a-after-b
match-next-a-have-seen-b a A * move-to-last-bx-to-compare-again
match-next-a-have-seen-b A * r match-next-a-have-seen-b
match-next-a-have-seen-b b * * first-block-is-longer
match-next-a-have-seen-b _ * * first-block-is-longer
match-next-a-have-seen-b * * * ERROR-match-next-a-have-seen-b
move-to-last-bx-to-compare-again b * l move-to-last-bx-then-compare
move-to-last-bx-to-compare-again * * l move-to-last-bx-to-compare-again
move-to-last-bx-to-compare-again _ * * ERROR-move-to-last-bx-to-compare-again
move-to-last-bx-then-compare b * r compare-cycle
move-to-last-bx-then-compare x * r compare-cycle
move-to-last-bx-then-compare * * l move-to-last-bx-then-compare
move-to-last-bx-then-compare _ * * ERROR-move-to-last-bx-then-compare
first-block-is-longer * * l swap-last-b-to-y
swap-last-b-to-y b y l swap-longest-to-L
swap-last-b-to-y * * l swap-last-b-to-y
swap-last-b-to-y _ * * ERROR-swap-last-b-to-y
swap-longest-to-L A L l swap-longest-to-L
swap-longest-to-L a L l swap-longest-to-L
swap-longest-to-L x * r begin-swap-left-right-block
swap-longest-to-L b * r begin-swap-left-right-block
swap-longest-to-L * * * ERROR-swap-longest-to-L
begin-swap-left-right-block L A r convert-next-A-to-L
begin-swap-left-right-block A * r begin-swap-left-right-block
move-to-last-bx-to-convert-A-to-L b * r begin-swap-left-right-block
move-to-last-bx-to-convert-A-to-L x * r begin-swap-left-right-block
move-to-last-bx-to-convert-A-to-L * * l move-to-last-bx-to-convert-A-to-L
convert-next-A-to-L A L l move-to-last-bx-to-convert-A-to-L
convert-next-A-to-L b * * swap-last-A-to-L
convert-next-A-to-L _ * * swap-last-A-to-L
convert-next-A-to-L * * r convert-next-A-to-L
swap-last-A-to-L A L * move-y
swap-last-A-to-L * * l swap-last-A-to-L
move-y * * * move-y-fix-current
move-y-fix-current L y r move-y-fix-next-y
move-y-fix-current * * * halt-error
move-y-fix-next-y y L * clean-string
move-y-fix-next-y * * r move-y-fix-next-y
left-to-clean _ * r start-cleaning
left-to-clean * * l left-to-clean
clean-string * * * left-to-clean
start-cleaning A a r start-cleaning
start-cleaning L a r start-cleaning
start-cleaning y b r start-cleaning
start-cleaning x b r start-cleaning
start-cleaning _ * l left-to-compare-cycle
start-cleaning b * r start-cleaning
start-cleaning a * r start-cleaning
left-to-clean-but-stop-at-x-coming-back _ * r start-cleaning-btaxcb
left-to-clean-but-stop-at-x-coming-back * * l left-to-clean-but-stop-at-x-coming-back
start-cleaning-btaxcb A a r start-cleaning-btaxcb
start-cleaning-btaxcb y b r start-cleaning-btaxcb
start-cleaning-btaxcb x * r start-cleaning-btaxcb
start-cleaning-btaxcb L a r start-cleaning-btaxcb
start-cleaning-btaxcb _ * l move-left-until-x
start-cleaning-btaxcb b * r start-cleaning-btaxcb
start-cleaning-btaxcb a * r start-cleaning-btaxcb
move-left-until-x x * r compare-cycle
move-left-until-x * * l move-left-until-x
in-order b x * in-order
in-order * * * left-to-clean-but-stop-at-x-coming-back
start-eliminating A a l start-eliminating
start-eliminating x b l start-eliminating
start-eliminating _ * r remove-first-b
start-eliminating * * l start-eliminating
remove-first-b b _ r check-if-pair-needs-to-be-removed
left-to-check-pairs _ * r check-if-pair-needs-to-be-removed
left-to-check-pairs * * l left-to-check-pairs
check-if-pair-needs-to-be-removed b * * left-to-remove-pair
check-if-pair-needs-to-be-removed _ * * halt-accept
check-if-pair-needs-to-be-removed * * r check-if-pair-needs-to-be-removed
left-to-remove-pair _ * r remove-pair
left-to-remove-pair * * l left-to-remove-pair
remove-pair * * * remove-first-block
remove-first-block a _ r remove-first-block
remove-first-block b _ r right-to-remove-second-block
right-to-remove-second-block _ * l remove-second-block
right-to-remove-second-block * * r right-to-remove-second-block
remove-second-block a _ l remove-second-block
remove-second-block b _ l left-to-check-pairs
